<?xml version="1.0" encoding="utf-8"?>

<!--  

	Video Rating System
	Created by Chris Hall, USANA Studios April 2009 chris.hall@us.usana.com
	All Rights Reserved
	updated 4/10/09 by Chris
	
	main.mxml

 -->
 
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" 
	backgroundGradientAlphas="[1.0, 1.0]" 
	backgroundGradientColors="[#1B1B1B, #1B1B1B]" 
	creationComplete="init(event)" 
	xmlns:components="components.*"
	xmlns:usana="com.usana.*">
   
   
   <!-- Set the CSS -->
	<mx:Style source="assets/stylesheets/styles.css"/>
    

<mx:Script>
	<![CDATA[
		
		import com.GuN.UI.customUIComponent.slider.*;
		import com.videoRating.utils.*;
		import flash.display.*;
		import flash.events.*;
		import flash.net.*;
		import flash.text.*;
		import flash.utils.*;
		import mx.charts.series.AreaSeries;
		import mx.charts.series.items.AreaSeriesItem;
		import mx.charts.series.LineSeries;
		import mx.controls.Alert;
		import mx.controls.Text;
		import mx.events.MetadataEvent;
		import mx.events.VideoEvent;
		import mx.managers.BrowserManager;
		import mx.managers.IBrowserManager;
		import mx.utils.URLUtil;
		private var activeLineSeries:LineSeries;
		private var activePoint:AreaSeriesItem;
		private var activeSeries:AreaSeries;
		private var startValues:Array;

    
    
	//=================================================================================
	//--- Variables
	//=================================================================================
	
	public var _videoTime:Number;
	public var URL:String = "http://www.usanamedia.com/uRate/";
	public var email:String = "market.research@us.usana.com";
	private var databaseRequest:URLRequest = new URLRequest("");
	private var databaseLoader:URLLoader = new URLLoader();
	private var databaseVars:URLVariables = new URLVariables();
	private var feedbackURL:String = "mailto:" + email;
	private var feedbackRequest:URLRequest = new URLRequest(feedbackURL);
	private var finishedLink:String = new String();
	private var _timeLimit:Number = 3;
	private var currentTime:Number = 0;
	private var _currentTime:Date;
	private var URLParams:IBrowserManager;
	private var _timeStamp:Date = new Date();
	private var year:String = String(_timeStamp.fullYear);
	private var month:String = String(_timeStamp.month);
	private var day:String = String(_timeStamp.day);
	private var hour:String = String(_timeStamp.hours);
	private var seconds:String = String(_timeStamp.seconds);
	private var milliseconds:String = String(_timeStamp.milliseconds);
	private var randomNumber:Number = Math.floor(Math.random() * (1+99-10)) + 10; 
	private var uniqueID:String;
	private var survey:String;	
	private var multOf3:Array = [];
	private var multOf5:Array = [];
	private var urlVarData:String = new String();
	private var surveyString:String = new String();
	public var videoURL:String = new String();

	
	//---------------------------------------
	// BINDABLE VARIABLES
	//---------------------------------------
	[Bindable] private var arrayValues:Array = ["null","One", "Two", "Three", "Four", "Five", "Six", "Seven"];
	[Bindable] private var fileExt:String = ".flv";
	[Bindable] public var sampleProvider:String;
	[Bindable] public var streamURL:String = "rtmp://cp74021.edgefcs.net/ondemand/";
	[Bindable] public var userID:String = "";
	[Bindable] public var videoID:String = "";
	[Bindable] public var XMLData:XML;
	[Bindable] public var _age:String = new String();
	[Bindable] public var _gender:String = new String();
	[Bindable] public var _race:String = new String();
	[Bindable] public var _residence:String = new String();
	[Bindable] public var _results:String = new String();
	[Bindable] public var _timestamp:String = new String();
	[Bindable] public var _XMLParents:String;
	[Bindable] public var _zip:String = new String();

	
	
	//=================================================================================
	//--- Initial Method
	//=================================================================================
	
	private function init(event:Event):void
	{
			// Pulls the video and user from the URL
			URLParams = BrowserManager.getInstance();                
            URLParams.init("", "uRate: USANA's Online Video Rating Tool");
            var params:Object = URLUtil.stringToObject(URLParams.fragment, "&"); 

			// Checks to make sure parameters are there
			if (params.video == undefined || params.video == "") { Alert.show("Video is Undefined") } else { videoID = params.video; }
			//videoID = "test";
			
			if (params.sp == undefined || params.sp == "") { sampleProvider = "USANA";} else {sampleProvider = params.sp;} 
			
			if (params.user == undefined || params.user == "") {userID = String(videoID + year + month + day + hour + seconds + milliseconds + randomNumber);} 			   else {userID = params.user;}
				var loader:URLLoader = new URLLoader(); 
				loader.addEventListener(Event.COMPLETE, loadXML); 
				loader.load(new URLRequest("http://usana.edgeboss.net/flash/usana/rating/" + videoID + ".flv")); 
			
           // This sets the initial parameters of the XML
           _XMLParents = "<results video='" + videoID +"' timestamp='" + year + month + day + hour + seconds + milliseconds + "' userID='" + userID + "' sampleProvider='" + sampleProvider + "'></results>";
			XMLData = XML(_XMLParents);
			urlVarData = "video=" + videoID + "&timestamp=" + year + month + day + hour + seconds + milliseconds + "&userID=" + userID + "&sampleProvider=" + sampleProvider + "&";
			_timestamp=year + month + day + hour + seconds + milliseconds;
			// Creates the multiples of 3 and 5 for recording video data
			var i:uint;
			for (i=0; i<1000; i++)
			{
			   multOf3.push(3*i);
			   multOf5.push(5*i);
			}
			
	}
	

		
      private function loadXML(e:Event):void
      {
      	var xmlData:XML =  new XML(e.target.data);
        videoURL = ParseXML(xmlData);  
		
		/* TEMPORARY FOR TESTING! */
		//appStack.selectedIndex = 3;
		

      }

	private function ParseXML(item:XML):String
	{
		return String(item.streamName);
	}
	


	
	
	//=================================================================================
	//--- Saves the Survey portion so we can use it if they want to re-do the video
	//=================================================================================
	
	public function recordSurvey(data:XML, string:String):void
	{
		urlVarData += string + "results=";
		surveyString = string + "results=";
		survey = String(data);
		XMLData = data;
		appStack.selectedChild=tutorial;
	}
	

	//=================================================================================
	//--- Called when the user wants to retake the video portion
	//=================================================================================
	
	public function doOver():void
	{
		appStack.selectedChild=videoScreen;
		urlVarData = surveyString;
		XMLData = XML(survey);
		videoScreen.hSlider.value = 4;
		videoScreen.videoPlayer.playheadTime = 0;
		videoScreen.videoPlayer.play();
		playPauseVideo();
		
	}
	
	
	//=================================================================================
	//--- When the video completes
	//=================================================================================
	
	public function videoComplete(event:VideoEvent):void
	{
		videoScreen.videoPlayer.stop();
		appStack.selectedChild=chartScreen;
		
		
	}
	
	
	//=================================================================================
	//--- Sends the XML data to the sendEmail Class
	//=================================================================================
	
	public function sendResults():void
	{
		
		uniqueID = userID;
		//finishedLink = "http://www.e-rewards.com/complete.do?ftouch=" + userID;
		finishedLink = "http://usanahf.questionpro.com";
		
		// Writes an XML file to server and sends and email notification
		var emailResults:sendEmail = new sendEmail();
		//emailResults.dispatch(uniqueID);
		
		emailResults.sendDatabase();
		
		
	}
	
	private function onIOError(evt:IOErrorEvent):void 
	{
		Alert.show("An error occurred when attempting to write the XML.\n" + evt.text);
	}
	
	private function onComplete(evt:Event):void 
	{
		
    }
	
	
	//=================================================================================
	//--- Called from sendEmail class when the data has been sent
	//=================================================================================
	
	public function sendComplete():void {
		var finishedRequest:URLRequest = new URLRequest(finishedLink);
		navigateToURL(finishedRequest, "_self");
		//appStack.selectedChild=thankYou;
		
	}
	
	
	//=================================================================================
	//--- Inititates chart
	//=================================================================================
	
	private function initChartData():void
	{
		//chart.dataProvider = XMLData.snapshot;
		

	}
			
			
	//=================================================================================
	//--- Called by playhead update. adds info to the XML data
	//=================================================================================
	
	private function recordData(timeElapsed:String, rawTime:Number):void
	{
		var roundedValue:Number = Math.round(videoScreen.hSlider.value);
		var ratingValue:String = String(roundedValue);
		var _newChild:String = '<snapshot time="' + timeElapsed + '" rating="' + ratingValue + '"/>';
		var _newXMLChild:XML = XML(_newChild);
		
		XMLData.appendChild(_newXMLChild);
		urlVarData += rawTime.toString() + ":" + ratingValue + ",";
		_results += rawTime.toString() + ":" + ratingValue + ",";

							
	}
			
	private function formatTime(value:int):String
	{
		var result:String = (value % 60).toString();
				
		if (result.length == 1)
			result = Math.floor(value / 60).toString() + ":0" + result;
		else 
			result = Math.floor(value / 60).toString() + ":" + result;
			return result;
	}
	
	
	//=================================================================================
	//--- Listens for video buffering
	//=================================================================================
	
	public function videoDisplay_stateChange(evt:VideoEvent):void {
               		switch (evt.state) {
               			
                   	case VideoEvent.BUFFERING:
                    //evt.currentTarget.visible = false;
                    videoScreen.playheadTime.text = "BUFFERING";
                    videoScreen.playPause.enabled = false;
                    break;
                    
                    case VideoEvent.PLAYING:
                    //evt.currentTarget.visible = false;
                     videoScreen.playPause.enabled = true;
                    break;
               }
            }
	
			//=================================================================================
			//--- Inititates the video player
			//=================================================================================

			public function createFLVPlayer():void
			{
				/* // FLVPlayback compontent

				playback.width = 320;
				playback.height = 240;
				videoPlayer.addChild( playback );
				playback.source = streamURL + videoID + fileExt;
				playback.scaleMode = VideoScaleMode.MAINTAIN_ASPECT_RATIO;
				playback.skin = "assets/skin/SkinUnderPlaySeekMute.swf";
				playback.bufferingBarHidesAndDisablesOthers = true;
				playback.skinBackgroundAlpha = .3;
				playback.skinBackgroundColor = 0x000000;
				playback.autoPlay = false;
				playback.bufferTime = Math.round(_videoTime * .10);
				playback.addEventListener(VideoEvent.PLAYHEAD_UPDATE, updatePlayhead);
				playback.addEventListener(VideoEvent.COMPLETE, videoComplete);
				playback.addEventListener(MetadataEvent.METADATA_RECEIVED, getDuration);*/
				videoScreen.videoPlayer.source = streamURL + videoURL;
				videoScreen.videoPlayer.bufferTime = Math.round(_videoTime * .10);
				videoScreen.videoPlayer.load();

			}
			
		//=================================================================================
		//--- Gets the total video time
		//=================================================================================

		public function getDuration(event:MetadataEvent):void
		{
			_videoTime = event.info.duration;
			 var pTime:Date = new Date(videoScreen.videoPlayer.playheadTime * 1000 || 10);
	         var tTime:Date = new Date(videoScreen.videoPlayer.totalTime * 1000);
	         videoScreen.playheadTime.text = dateFormatter.format(pTime) + " / " + dateFormatter.format(tTime);
		}


	//=================================================================================
	//--- Play/pause video
	//=================================================================================

	public function playPauseVideo():void {
                if (videoScreen.videoPlayer.playing) {
                    videoScreen.videoPlayer.pause();
                    videoScreen.playPause.setStyle("icon",videoScreen.imagePlay);


                } else {
                    videoScreen.videoPlayer.play();
                    videoScreen.playPause.setStyle("icon",videoScreen.imagePause);


                }
            }

//=================================================================================
//--- Runs 4 times per second. uses the _timeLimit variable to decide whether or not to
//--  record every 3 secnds of the video or every 5 seconds
//=================================================================================
	public function updatePlayhead(event:VideoEvent):void
	{
		 var newTime:Number = Math.round(event.playheadTime);
		 var pTime:Date = new Date(videoScreen.videoPlayer.playheadTime * 1000 || 10);
         var tTime:Date = new Date(videoScreen.videoPlayer.totalTime * 1000);
         videoScreen.playheadTime.text = dateFormatter.format(pTime) + " / " + dateFormatter.format(tTime);

		//checks to make sure the time isn't zero
		if (newTime <= 1) {

		// checks to see if the video is > < the time limit	
		} else if (_videoTime <= _timeLimit*60) {

		// If under the time limit
		var isMultof3:Boolean = false;

			var i:uint;
			for (i=0; i<multOf3.length; i++)
			{
			   if (newTime == multOf3[i]) {

			   isMultof3 = true
			   if (newTime != currentTime && isMultof3 == true) {

				recordData(formatTime(event.playheadTime), newTime);
				currentTime = newTime;



			   } else {

			   isMultof3 = false

			   }

			}

		}

		// is over the time limit
		} else {

			var isMultof5:Boolean = false;

			var j:uint;
			for (j=0; j<multOf5.length; j++)
			{
			   if (newTime == multOf5[j]) {

			   isMultof5 = true
			   if (newTime != currentTime && isMultof5 == true) {

				recordData(formatTime(event.playheadTime), newTime);
				currentTime = newTime;



			   } else {

			   isMultof5 = false

			   }

			}

		}


		}

	}

	
		
	]]>
</mx:Script>
	
	
<mx:Stroke id="lineStr" weight="7" />
<mx:SolidColor id="threshold_OK" color="green" alpha="0.4" />
<mx:Stroke id="threshold_OK_str" color="green" weight="2" />
<mx:SolidColor id="threshold_WARNING" color="#FFFF00" alpha="0.4" />
<mx:Stroke id="threshold_WARNING_str" color="#FFFF00" weight="2" />

<!--  Slides the chart up  -->
<mx:SeriesSlide id="slider" duration="2000" direction="up" />

<!--  Formats the video time  -->
<mx:DateFormatter id="dateFormatter" formatString="NN:SS" />

<!--  Styles the chart background  -->
<mx:Array id="chartBackground">
     <mx:GridLines verticalChangeCount="1" direction="horizontal" >
     
        <mx:horizontalStroke>
           <mx:Stroke weight="1" alpha=".10" color="0xFFFFFF"/>
        </mx:horizontalStroke>
        
        <mx:horizontalFill>
           <mx:SolidColor color="0x000000" alpha=".10"/>
        </mx:horizontalFill>
        
     </mx:GridLines>
  </mx:Array>



<!--  Starts the Application  -->
<mx:ViewStack id="appStack" width="100%" height="100%">

	<!-- INTRO SCREEN -->
	<usana:Intro id="intro" />

	<!--SURVERY SCREEN -->
	<usana:SurveyScreen id="surveyScreen" />

	<!--TUTORIAL -->
	<usana:Tutorial id="tutorial" />
	
	<!--VIDEO SCREEN -->
	<usana:VideoScreen id="videoScreen" />

	<!--CHART COMPONENT-->
	<usana:ResultChart id="chartScreen"/>
	
	<!--THANK YOU -->
	<usana:ThankYou id="thankYou" />

	
</mx:ViewStack>
	
	
</mx:Application>
